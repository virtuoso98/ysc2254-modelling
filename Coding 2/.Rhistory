library(optrees)
nodes <- 1:4
arcs <- matrix(c(1, 2, 2,
1, 3, 1,
2, 3, -2,
2, 4, 1,
3, 4, 1),
ncol = 3,
byrow = T)
# no answer because dijkstra's algorithm assumes non-negative weights
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
# answer obtained
getShortestPathTree(nodes,
arcs,
algorithm = "Bellman-Ford",
directed = T,
show.data = T,
show.distances = T)
# Problem 8.2.5
node <- 1:7
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 48,
2, 4, 76,
2, 5, 98,
2, 6, 124,
2, 7, 156,
3, 4, 76,
3, 5, 98,
3, 6, 124,
3, 7, 156,
4, 5, 98,
4, 6, 124,
4, 7, 156,
5, 6, 124,
5, 7, 156,
6, 7, 156),
ncol = 3,
byrow = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
show.data = T,
show.distances = T)
# Problem 8.2.5
node <- 1:7
# Problem 8.2.5
nodes <- 1:7
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 48,
2, 4, 76,
2, 5, 98,
2, 6, 124,
2, 7, 156,
3, 4, 76,
3, 5, 98,
3, 6, 124,
3, 7, 156,
4, 5, 98,
4, 6, 124,
4, 7, 156,
5, 6, 124,
5, 7, 156,
6, 7, 156),
ncol = 3,
byrow = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
show.data = T,
show.distances = T)
# Problem 8.2.5
nodes <- 1:7
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 48,
2, 4, 76,
2, 5, 98,
2, 6, 124,
2, 7, 156,
3, 4, 76,
3, 5, 98,
3, 6, 124,
3, 7, 156,
4, 5, 98,
4, 6, 124,
4, 7, 156,
5, 6, 124,
5, 7, 156,
6, 7, 156),
ncol = 3,
byrow = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
show.data = T,
show.distances = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
arcs <- matrix(c(1, 2, 2,
1, 3, 1,
2, 3, -2,
2, 4, 1,
3, 4, 1),
ncol = 3,
byrow = T)
# answer obtained
getShortestPathTree(nodes,
arcs,
algorithm = "Bellman-Ford",
directed = T,
show.data = T,
show.distances = T)
nodes <- 1:4
arcs <- matrix(c(1, 2, 2,
1, 3, 1,
2, 3, -2,
2, 4, 1,
3, 4, 1),
ncol = 3,
byrow = T)
# answer obtained
getShortestPathTree(nodes,
arcs,
algorithm = "Bellman-Ford",
directed = T,
show.data = T,
show.distances = T)
# Problem 8.2.5
nodes <- 1:7
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 48,
2, 4, 76,
2, 5, 98,
2, 6, 124,
2, 7, 156,
3, 4, 76,
3, 5, 98,
3, 6, 124,
3, 7, 156,
4, 5, 98,
4, 6, 124,
4, 7, 156,
5, 6, 124,
5, 7, 156,
6, 7, 156),
ncol = 3,
byrow = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 33,
2, 4, 48,
2, 5, 76,
2, 6, 98,
2, 7, 124,
3, 4, 33,
3, 5, 48,
3, 6, 76,
3, 7, 98,
4, 5, 33,
4, 6, 48,
4, 7, 76,
5, 6, 33,
5, 7, 48,
6, 7, 33),
ncol = 3,
byrow = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
# Problem 8.2.5
nodes <- 1:7
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 33,
2, 4, 48,
2, 5, 76,
2, 6, 98,
2, 7, 124,
3, 4, 33,
3, 5, 48,
3, 6, 76,
3, 7, 98,
4, 5, 33,
4, 6, 48,
4, 7, 76,
5, 6, 33,
5, 7, 48,
6, 7, 33),
ncol = 3,
byrow = T)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
View(arcs)
getShortestPathTree(nodes,
arcs,
algorithm = "Dijkstra",
directed = T,
show.data = T,
show.distances = T)
spTreeDijkstra(nodes,
arcs,
directed = T,
source.node = 1)
arcs <- matrix(c(1, 2, 33,
1, 3, 48,
1, 4, 76,
1, 5, 98,
1, 6, 124,
1, 7, 156,
2, 3, 33,
2, 4, 48,
2, 5, 76,
2, 6, 98,
2, 7, 124,
3, 4, 33,
3, 5, 48,
3, 6, 76,
3, 7, 98,
4, 5, 33,
4, 6, 48,
4, 7, 76,
5, 6, 33,
5, 7, 48,
6, 7, 33),
ncol = 3,
byrow = T)
spTreeDijkstra(nodes,
arcs,
directed = T,
source.node = 1)
